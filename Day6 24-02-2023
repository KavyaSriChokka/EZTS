#PROGRAM1
#Prime Number
'''
class classn:
    def __init__(self,n):
        self.n=n
    def isprime(self):
        c=0
        for i in range(1,self.n+1):
            if self.n%i==0:
                c=c+1
        if c ==2:
            return "Yes"
        else:
            return "No"

ob1=classn(20)
ob2=classn(19)
print(ob1.isprime())
print(ob2.isprime())
#PROGRAM2
#Palindrome
class classn:
    def __init__(self,n):
        self.n=n
    def ispalindrome(self):
        if self.n==self.n[::-1]:
            print("Yes")
        else:
            print("No")
ob1=classn("Hello")
ob2=classn("SaS")
ob1.ispalindrome()
ob2.ispalindrome()

#PROGRAM3
#Prime and Palindrome
class total:
    def __init__(self,n):
        self.n=n
    def isprime(self):
        c=0
        for i in range(1,self.n+1):
            if self.n%i==0:
                c=c+1
        if c ==2:
            print("Yes")
        else:
            print("No")
    def ispalindrome(self):
        s=str(self.n)
        if s==s[::-1]:
            print("Yes")
        else:
            print("No")
ob1=total(22)
ob2=total(24)
ob1.isprime()
ob1.ispalindrome()
ob2.isprime()
ob2.ispalindrome()

#PROGRAM4
class total:
    def __init__(self,n,s):
        self.n=n
        self.s=s
    def isprime(self):
        c=0
        for i in range(1,self.n+1):
            if self.n%i==0:
                c=c+1
        if c ==2:
            print("Yes")
        else:
            print("No")
    def ispalindrome(self):
       
        if self.s==self.s[::-1]:
            print("Yes")
        else:
            print("No")
ob1=total(12,"SaS")
ob1.isprime()
ob2=total(14,"Hello")
ob2.ispalindrome()
ob3=total(13,"Sas")
ob3.isprime()
ob2.ispalindrome()

#PROGRAM5
class parent:
    def __init__(self):
        print("Parent Method")
class Child(Parent):
    def __init__(self):
        super().__init__()
        print("Child Method")
c=Child()

p=details("abc",27,24,8,2001)
p.display()
p.display1()


#PROGRAM6
class dob:
    def __init__(self,date,month,year):
        self.date=date
        self.month=month
        self.year=year
    def display(self):
        d=(1:"Jan",2:"Feb")
        print(self.date)
        print(d[self.month])
        print(self.year)
class details(dob):
    def __init__(self,name,age,date,month,year):
        self.name=name
        self.age=age
        self.date=date
        self.month=month
        self.year=year
        super().__init__(date,month,year)
    def display(self):
        print(self.name)
        print(self.age)
        print(self.month)
        print(self.year)
p=details("abc",27,24,8,2001)
p.display()
p.display1()

#PROGRAM7
class Parent:
    def fun1(self):
        print("This is function1")
class Child(Parent):
    def fun2(self):
        print("This is function2")
class Child2(Child):
    def fun3("This is function3")
ob=Child2()
ob.fun1()
ob.fun2()
ob.fun3()
'''
#PROGRAM8
class vehicle:
    def display3():
        pass
class motor:
    def display2():
        pass
class car:
    def display:
        pass
v1=car("BMW","300cc","Petrol")
v1.display1()
v1.display2()
v1.display3()

































